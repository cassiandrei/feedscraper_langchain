# Generated by Django 5.2.6 on 2025-09-21 13:07

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Nome da fonte de dados", max_length=255, unique=True
                    ),
                ),
                ("url", models.URLField(help_text="URL da listagem principal")),
                (
                    "content_type",
                    models.CharField(
                        choices=[("pdf", "PDF"), ("html", "HTML"), ("text", "Text")],
                        help_text="Tipo de conteúdo processado",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrição da fonte"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Se a fonte está ativa para processamento",
                    ),
                ),
                (
                    "scraping_config",
                    models.JSONField(
                        default=dict,
                        help_text="Configurações específicas para scraping (seletores CSS, XPath, etc)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fonte de Dados",
                "verbose_name_plural": "Fontes de Dados",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TechnicalNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Título da nota técnica", max_length=500
                    ),
                ),
                (
                    "original_url",
                    models.URLField(help_text="URL original do documento"),
                ),
                (
                    "document_hash",
                    models.CharField(
                        help_text="Hash MD5 do documento para detectar duplicatas",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, help_text="Data de publicação", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendente"),
                            ("processing", "Processando"),
                            ("processed", "Processado"),
                            ("error", "Erro"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "file_size",
                    models.IntegerField(
                        blank=True, help_text="Tamanho do arquivo em bytes", null=True
                    ),
                ),
                (
                    "content_preview",
                    models.TextField(
                        blank=True, help_text="Prévia do conteúdo original"
                    ),
                ),
                (
                    "local_file_path",
                    models.CharField(
                        blank=True, help_text="Caminho do arquivo local", max_length=500
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="Fonte da nota técnica",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="technical_notes",
                        to="langchain_integration.datasource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nota Técnica",
                "verbose_name_plural": "Notas Técnicas",
                "ordering": ["-publication_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProcessingLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operation",
                    models.CharField(
                        choices=[
                            ("scraping", "Scraping"),
                            ("download", "Download"),
                            ("processing", "Processamento IA"),
                            ("validation", "Validação"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("debug", "Debug"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(help_text="Mensagem do log")),
                (
                    "details",
                    models.JSONField(
                        default=dict, help_text="Detalhes adicionais em JSON"
                    ),
                ),
                (
                    "execution_time",
                    models.FloatField(
                        blank=True, help_text="Tempo de execução em segundos", null=True
                    ),
                ),
                (
                    "technical_note",
                    models.ForeignKey(
                        help_text="Nota técnica relacionada",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processing_logs",
                        to="langchain_integration.technicalnote",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log de Processamento",
                "verbose_name_plural": "Logs de Processamento",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProcessedSummary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("summary", models.TextField(help_text="Resumo gerado pelo LangChain")),
                (
                    "key_points",
                    models.JSONField(
                        default=list,
                        help_text="Pontos principais extraídos (lista de strings)",
                    ),
                ),
                (
                    "changes_identified",
                    models.JSONField(
                        default=list, help_text="Mudanças ou alterações identificadas"
                    ),
                ),
                (
                    "topics",
                    models.JSONField(
                        default=list, help_text="Tópicos/temas principais identificados"
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        help_text="Modelo de IA utilizado", max_length=100
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True,
                        help_text="Tempo de processamento em segundos",
                        null=True,
                    ),
                ),
                (
                    "tokens_used",
                    models.IntegerField(
                        blank=True, help_text="Número de tokens utilizados", null=True
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Score de confiança do resumo (0-1)",
                        null=True,
                    ),
                ),
                (
                    "technical_note",
                    models.OneToOneField(
                        help_text="Nota técnica resumida",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="summary",
                        to="langchain_integration.technicalnote",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resumo Processado",
                "verbose_name_plural": "Resumos Processados",
            },
        ),
        migrations.AddIndex(
            model_name="technicalnote",
            index=models.Index(
                fields=["source", "status"], name="langchain_i_source__285f6a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalnote",
            index=models.Index(
                fields=["document_hash"], name="langchain_i_documen_6cbb7f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalnote",
            index=models.Index(
                fields=["publication_date"], name="langchain_i_publica_2298dc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processinglog",
            index=models.Index(
                fields=["technical_note", "operation"],
                name="langchain_i_technic_30e882_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="processinglog",
            index=models.Index(
                fields=["level", "created_at"], name="langchain_i_level_75d0e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processedsummary",
            index=models.Index(
                fields=["technical_note"], name="langchain_i_technic_135888_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processedsummary",
            index=models.Index(
                fields=["model_used"], name="langchain_i_model_u_da374a_idx"
            ),
        ),
    ]
