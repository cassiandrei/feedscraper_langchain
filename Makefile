# Makefile para Projeto NFE Fazenda Scraper
# Comandos para gerenciamento de jobs e monitoramento

.PHONY: help setup-jobs setup-jobs-only setup-jobs-daemon status-jobs stop-jobs run-scraping run-processing monitor-logs clean

# Configura√ß√£o do ambiente Python
PYTHON := python
VENV_PATH := .venv
MANAGE := $(PYTHON) manage.py

# Cores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
BOLD := \033[1m
NC := \033[0m # No Color

help: ## Mostrar este menu de ajuda
	@echo "$(BOLD)üìã Comandos dispon√≠veis para NFE Fazenda Scraper:$(NC)\n"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo "\n$(YELLOW)üí° Exemplos de uso:$(NC)"
	@echo "  make setup-jobs     # Configurar e manter jobs rodando"
	@echo "  make monitor-logs   # Monitorar logs em tempo real"
	@echo "  make status-jobs    # Verificar status dos jobs"
	@echo "  make stop-jobs      # Parar todos os jobs"

setup-jobs: ## Configurar e iniciar jobs NFE (modo interativo)
	@echo "$(BLUE)üöÄ Configurando jobs NFE Fazenda...$(NC)"
	$(MANAGE) start_jobs

setup-jobs-only: ## Apenas configurar jobs sem mant√™-los rodando
	@echo "$(BLUE)‚öôÔ∏è  Configurando jobs NFE (setup only)...$(NC)"
	$(MANAGE) start_jobs --setup-only

setup-jobs-daemon: ## Configurar jobs em modo daemon (background)
	@echo "$(BLUE)üîÑ Iniciando jobs NFE em modo daemon...$(NC)"
	$(MANAGE) start_jobs --daemon &
	@echo "$(GREEN)‚úÖ Jobs iniciados em background$(NC)"

status-jobs: ## Verificar status atual dos jobs
	@echo "$(BLUE)üìä Verificando status dos jobs...$(NC)"
	$(MANAGE) start_jobs --status

stop-jobs: ## Parar todos os jobs NFE
	@echo "$(RED)üõë Parando jobs NFE...$(NC)"
	$(MANAGE) start_jobs --stop
	@echo "$(GREEN)‚úÖ Jobs parados$(NC)"

run-scraping: ## Executar job de scraping manualmente
	@echo "$(YELLOW)üï∑Ô∏è  Executando scraping manual...$(NC)"
	$(MANAGE) start_jobs --run scraping

run-processing: ## Executar job de processamento IA manualmente
	@echo "$(YELLOW)üß† Executando processamento IA manual...$(NC)"
	$(MANAGE) start_jobs --run processing

monitor-logs: ## Monitorar logs NFE em tempo real
	@echo "$(BLUE)üëÄ Iniciando monitor de logs...$(NC)"
	@echo "$(YELLOW)üí° Para parar: Ctrl+C$(NC)"
	@chmod +x logs/monitor_logs.sh
	@./logs/monitor_logs.sh

monitor-logs-errors: ## Monitorar apenas erros nos logs
	@echo "$(RED)üö® Monitorando apenas ERROS...$(NC)"
	@tail -f logs/app.log | grep --color=always -E "(ERROR|CRITICAL)"

monitor-logs-jobs: ## Monitorar apenas logs relacionados a jobs
	@echo "$(GREEN)üë∑ Monitorando logs de JOBS...$(NC)"
	@tail -f logs/app.log | grep --color=always -E "(SCRAPING|PROCESSING|PIPELINE|Job|job)"

logs-today: ## Mostrar logs de hoje
	@echo "$(BLUE)üìÖ Logs de hoje...$(NC)"
	@grep "$$(date +'%Y-%m-%d')" logs/app.log | tail -50

logs-last-hour: ## Mostrar logs da √∫ltima hora
	@echo "$(BLUE)‚è∞ Logs da √∫ltima hora...$(NC)"
	@grep "$$(date +'%Y-%m-%d %H')" logs/app.log | tail -30

clean: ## Limpar arquivos tempor√°rios e cache
	@echo "$(YELLOW)üßπ Limpando arquivos tempor√°rios...$(NC)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "*.pyo" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(NC)"

# Comandos de desenvolvimento
dev-setup: ## Configurar ambiente de desenvolvimento
	@echo "$(BLUE)üîß Configurando ambiente de desenvolvimento...$(NC)"
	@if [ ! -d "$(VENV_PATH)" ]; then \
		echo "$(YELLOW)üì¶ Criando ambiente virtual...$(NC)"; \
		python -m venv $(VENV_PATH); \
	fi
	@echo "$(YELLOW)üìö Instalando depend√™ncias...$(NC)"
	@$(VENV_PATH)/bin/pip install -r requirements/development.txt
	@echo "$(YELLOW)üóÑÔ∏è  Aplicando migra√ß√µes...$(NC)"
	@$(MANAGE) migrate
	@echo "$(GREEN)‚úÖ Ambiente configurado$(NC)"

test: ## Executar testes
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@$(PYTHON) -m pytest tests/ -v

test-jobs: ## Executar testes espec√≠ficos dos jobs
	@echo "$(BLUE)üë∑ Testando jobs...$(NC)"
	@$(PYTHON) -m pytest tests/ -k "job" -v

# Comandos do Django
migrate: ## Aplicar migra√ß√µes do Django
	@echo "$(BLUE)üóÑÔ∏è  Aplicando migra√ß√µes...$(NC)"
	@$(MANAGE) migrate

makemigrations: ## Criar novas migra√ß√µes
	@echo "$(BLUE)üìù Criando migra√ß√µes...$(NC)"
	@$(MANAGE) makemigrations

runserver: ## Iniciar servidor Django
	@echo "$(BLUE)üåê Iniciando servidor Django...$(NC)"
	@$(MANAGE) runserver

shell: ## Abrir Django shell
	@echo "$(BLUE)üêç Abrindo Django shell...$(NC)"
	@$(MANAGE) shell

# Informa√ß√µes do sistema
info: ## Mostrar informa√ß√µes do sistema
	@echo "$(BOLD)üìã Informa√ß√µes do Sistema:$(NC)"
	@echo "$(BLUE)Python:$(NC) $$(python --version)"
	@echo "$(BLUE)Django:$(NC) $$(python -c 'import django; print(django.get_version())' 2>/dev/null || echo 'N√£o dispon√≠vel')"
	@echo "$(BLUE)Ambiente Virtual:$(NC) $$(if [ -d "$(VENV_PATH)" ]; then echo "‚úÖ Configurado"; else echo "‚ùå N√£o encontrado"; fi)"
	@echo "$(BLUE)Banco de Dados:$(NC) $$(if [ -f "db.sqlite3" ]; then echo "‚úÖ db.sqlite3 encontrado"; else echo "‚ùå Banco n√£o encontrado"; fi)"
	@echo "$(BLUE)Logs:$(NC) $$(if [ -f "logs/app.log" ]; then echo "‚úÖ logs/app.log ($$(wc -l < logs/app.log) linhas)"; else echo "‚ùå Logs n√£o encontrados"; fi)"

backup-logs: ## Fazer backup dos logs
	@echo "$(YELLOW)üìã Fazendo backup dos logs...$(NC)"
	@if [ -f "logs/app.log" ]; then \
		cp logs/app.log "logs/app.log.backup.$$(date +%Y%m%d_%H%M%S)"; \
		echo "$(GREEN)‚úÖ Backup criado$(NC)"; \
	else \
		echo "$(RED)‚ùå Arquivo de log n√£o encontrado$(NC)"; \
	fi

# Comando padr√£o
.DEFAULT_GOAL := help
